
/*
Given a string s, you are allowed to convert it to a palindrome by adding characters in front of it. Find and return the shortest palindrome you can find by performing this transformation.

Example 1:

Input: "aacecaaa"
Output: "aaacecaaa"
Example 2:

Input: "abcd"
Output: "dcbabcd"
 */

public class ShortestPalindrome {
	/**
	 * Use two pointers to find the middle of palindrome of the reversed string
	 * append the rest of the first portion of the string to the end of the string
	 *
	 * Time: O(n^2)
	 * Space: O(1)
	 *
	 */
	public String shortestPalindrome(String s) {
		if (s == null || s.length() <= 1) {
			return s;
		}

		StringBuilder sb = new StringBuilder(s);
		// Reverse the string
		int i = 0;
		int j = s.length() - 1;
		while (i < j){
			char tmp = sb.charAt(i);
			sb.setCharAt(i, sb.charAt(j));
			sb.setCharAt(j, tmp);
			i++;
			j--;
		}

		int left = (s.length() - 1) % 2 == 0 ? (s.length() - 1) / 2 - 1 : (s.length() - 1) / 2;
		int right = (s.length() - 1) % 2 == 0 ? left + 2 : left + 1;
		int step = 0;
		while (right < s.length()) {
			if(sb.charAt(left) == sb.charAt(right)){
				left--;
				right++;
				step++;
			} else {
				left += step;
				right -= step;
				if (left == right - 1){
					right++;
				} else {
					left++;
				}
				step = 0;
			}
		}

		while (left >= 0) {
			sb.append(sb.charAt(left--));
		}

		return sb.toString();
	}
}
