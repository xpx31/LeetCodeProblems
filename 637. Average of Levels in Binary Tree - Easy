
/*
Given a non-empty binary tree, return the average value of the nodes on each level in the form of an array.
Example 1:
Input:
    3
   / \
  9  20
    /  \
   15   7
Output: [3, 14.5, 11]
Explanation:
The average value of nodes on level 0 is 3,  on level 1 is 14.5, and on level 2 is 11. Hence return [3, 14.5, 11].
Note:
The range of node's value is in the range of 32-bit signed integer.
 */

public class AvgLevelBinaryTree {
	/**
	 * Use BFS to expand nodes level by level
	 *
	 * Time: O(n)
	 * Space: O(n)
	 */
	public List<Double> averageOfLevels(TreeNode root) {
		List<Double> avgList = new ArrayList<>();
		if (root == null) {
			return avgList;
		}

		Queue<TreeNode> q = new LinkedList<>();
		q.offer(root);
		while (!q.isEmpty()){
			int size = q.size();
			double avg = 0.0;

			for (int i = 0; i < size; i++){
				TreeNode node = q.remove();
				if (node.left != null) {
					q.offer(node.left);
				}
				if (node.right != null){
					q.offer(node.right);
				}
				avg += (double)node.value;
			}

			avgList.add(avg / size);
		}

		return avgList;
	}
}
