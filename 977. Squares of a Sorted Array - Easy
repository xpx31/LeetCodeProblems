/*
Given an array of integers A sorted in non-decreasing order, return an array of the squares of each number, also in sorted non-decreasing order.

Example 1:

Input: [-4,-1,0,3,10]
Output: [0,1,9,16,100]
Example 2:

Input: [-7,-3,2,3,11]
Output: [4,9,9,49,121]
 

Note:

1 <= A.length <= 10000
-10000 <= A[i] <= 10000
A is sorted in non-decreasing order.

 */
 
 public class SquaresSortedArr {
/**
	 * Use binary search to find the first non-negative number,
	 * and divide the array into portions,
	 * use two pointers moving in the different direction, move the smaller squre term into the new array
	 *
	 * Time: O(n)
	 * Space: O(n)
	 *
	 */
	public int[] sortedSquares(int[] A) {
		// Sanity Check
		if (A == null || A.length <= 0){
			return A;
		}
		if (A.length == 1) {
			A[0] *= A[0];
			return A;
		}

		// Binary Search to find the first non-negative number
		int bL = 0;
		int bR = A.length - 1;
		int med = 0;
		while(bL < bR - 1){
			med = bL + (bR - bL) / 2;
			if (A[med] >= 0){
				bR = med;
			} else {
				bL = med;
			}
		}

		// Squre the terms and sort the elements based on smaller value
		med = bR;
		int sL = med - 1;
		int sR = med;
		int[] arr = new int[A.length];
		int i = 0;
		while (sL >= 0 && sR <= A.length - 1){
			arr[i++] = Math.pow(A[sL], 2) <= Math.pow(A[sR], 2) ?
				(int)Math.pow(A[sL--], 2) : (int)Math.pow(A[sR++], 2);
		}

		while (sL >= 0){
			arr[i++] = (int)Math.pow(A[sL--], 2);
		}

		while (sR <= A.length - 1){
			arr[i++] = (int)Math.pow(A[sR++], 2);
		}

		return arr;
	}


	private void swap(int[] A, int i1, int i2) {
		int tmp = A[i1];
		A[i1] = A[i2];
		A[i2] = tmp;
	}

	/**
	 * Use arrays sort after squre each term
	 *
	 * Time: O(nlogn)
	 * Space: O(depends)
	 */
	public int[] sortedSquaresII(int[] A) {
		// Sanity Check
		if (A == null || A.length <= 0){
			return A;
		}

		for (int i = 0; i < A.length; i++){
			A[i] *= A[i];
		}

		Arrays.sort(A);

		return A;
	}
