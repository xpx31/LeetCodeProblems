
/*
Given a string, determine if it is a palindrome, considering only alphanumeric characters and ignoring cases.

Note: For the purpose of this problem, we define empty string as valid palindrome.

Example 1:

Input: "A man, a plan, a canal: Panama"
Output: true
Example 2:

Input: "race a car"
Output: false
 */

public class ValidPalindrome {
	/**
	 * Use two pointers going in opposite directions from both ends of the string
	 * Check if the characters are the same.
	 *
	 * Time: O(n)
	 * Space: O(1)
	 *
	 * @param s
	 * @return
	 */
	public boolean isPalindrome(String s){
		if (s.length() <= 0){
			return true;
		}

		int i = 0;
		int j = s.length() - 1;

		while (i < j){
			if (isAlphanumeric(s.charAt(i)) && isAlphanumeric(s.charAt(j))){
				if (Character.toLowerCase(s.charAt(i)) == Character.toLowerCase(s.charAt(j))){
					i++;
					j--;
				} else {
					return false;
				}
			} else {
				while(i < j && !isAlphanumeric(s.charAt(i))){
					i++;
				}
				while(i < j && !isAlphanumeric(s.charAt(j))){
					j--;
				}
			}
		}

		return true;
	}

	/**
	 * Use two stacks to store two halves of the input string
	 * and check each alphanumeric character from two stacks
	 *
	 * Time: O(n)
	 * Space: O(n)
	 */
	public boolean isPalindromeII(String s) {
		if (s.length() <= 0){
			return true;
		}

		Deque<Character> stack1 = new ArrayDeque<>();
		Deque<Character> stack2 = new ArrayDeque<>();

		// Put all characters into one stack
		for (int i = 0; i < s.length(); i++){
			if (isAlphanumeric(s.charAt(i))){
				stack1.push(Character.toLowerCase(s.charAt(i)));
			}
		}

		// Put half into another stack
		int size = stack1.size();
		for (int i = 0; i < size / 2; i++){
			stack2.push(stack1.pop());
		}

		if (stack1.size() > stack2.size()) {
			stack1.pop();
		}

		// Check each character in two stacks
		while (!stack1.isEmpty()){
			if (stack1.pop() != stack2.pop()){
				return false;
			}
		}

		return true;
	}

	private boolean isAlphanumeric(char c){
		return ('0' <= c && c <= '9') || ('a' <= c && c <= 'z') || ('A' <= c && c <= 'Z');
	}
}
