
/*
Given an integer array, you need to find one continuous subarray that if you only sort this subarray in ascending order, then the whole array will be sorted in ascending order, too.

You need to find the shortest such subarray and output its length.

Example 1:
Input: [2, 6, 4, 8, 10, 9, 15]
Output: 5
Explanation: You need to sort [6, 4, 8, 10, 9] in ascending order to make the whole array sorted in ascending order.
Note:
Then length of the input array is in range [1, 10,000].
The input array may contain duplicates, so ascending order here means <=.
 */
public class ShortestUnsortedSubArray {
	/**
	 * Use a stack to find out the min in the unsorted subarray when scanning from left to right,
	 * and find the max in the unsorted subarray when scanning from right to left.
	 *
	 * Time: O(n)
	 * Space: O(n)
	 */
	public int findUnsortedSubarray(int[] nums) {
		if (nums == null) {
			return 0;
		}

		Deque<Integer> stack = new ArrayDeque<>();
		int lo = nums.length;
		int hi = 0;
		for (int k = 0; k < nums.length; k++){
			while (!stack.isEmpty() && nums[stack.peek()] > nums[k]){
				lo = Math.min(lo, stack.pop());
			}
			stack.push(k);
		}

		stack.clear();
		for (int k = nums.length - 1; k >= 0; k--){
			while (!stack.isEmpty() && nums[stack.peek()] < nums[k]){
				hi = Math.max(hi, stack.pop());
			}
			stack.push(k);
		}
		return lo > hi ? 0 : hi - lo + 1;
	}

	/**
	 * Use two variables to store min and max of the array,
	 * and another two to store the beginning and ending of the unsorted subarray
	 *
	 * Time: O(n)
	 * Space: O(1)
	 *
	 * @param nums
	 * @return
	 */
	public int findUnsortedSubarrayII(int[] nums) {
		if(nums == null){
			return 0;
		}
		int n = nums.length;
		int min = nums[n - 1];
		int max = nums[0];
		int lo = 1;
		int hi = 0;

		for (int i = 0; i < n; i++){
			max = Math.max(max, nums[i]);
			min = Math.min(min, nums[n - 1 - i]);
			if (max > nums[i]) {
				hi = i;
			}
			if (min < nums[n - 1 - i]){
				lo = n - 1 - i;
			}
		}

		return hi - lo + 1;
	}
}
