
/*
Given a string S that only contains "I" (increase) or "D" (decrease), let N = S.length.

Return any permutation A of [0, 1, ..., N] such that for all i = 0, ..., N-1:

If S[i] == "I", then A[i] < A[i+1]
If S[i] == "D", then A[i] > A[i+1]

Example 1:

Input: "IDID"
Output: [0,4,1,3,2]
Example 2:

Input: "III"
Output: [0,1,2,3]
Example 3:

Input: "DDI"
Output: [3,2,0,1]


Note:

1 <= S.length <= 10000
S only contains characters "I" or "D".
*/

public class DIString {
	/**
	 * Scan through the string and initiates an array with length of the length of the string + 1
	 * Keep two extrema numbers for the first element in the array
	 *
	 * Case 0: D
	 *   A[i] = N--
	 * Case 1: I
	 *   A[i] = 0++
	 *
	 * Time: O(n)
	 * Space: O(1)
	 *
	 */
	public int[] diStringMatch(String S) {
		if (S == null || S.length() <= 0){
			return new int[0];
		}

		int low = 0;
		int high = S.length();
		int[] A = new int[S.length() + 1];

		for(int i = 0; i < S.length(); i++){
			A[i] = S.charAt(i) == 'D' ? high-- : low++;
		}

		A[S.length()] = low;
		return A;
	}
}
