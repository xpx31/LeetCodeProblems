
/*
Given a binary tree, check whether it is a mirror of itself (ie, symmetric around its center).

For example, this binary tree [1,2,2,3,4,4,3] is symmetric:

    1
   / \
  2   2
 / \ / \
3  4 4  3
But the following [1,2,2,null,3,null,3] is not:
    1
   / \
  2   2
   \   \
   3    3
Note:
Bonus points if you could solve it both recursively and iteratively.
 */
public class SymmetricTree {
	/**
	 * Check if the left child is the same as
	 * the right child in compare with the other node in mirror recursively
	 *
	 * Time: O(n)
	 * Space: O(heigh of tree)
	 */
	public boolean isSymmetric(TreeNode root) {
		if (root == null) {
			return true;
		}

		return helper(root, root);
	}

	private boolean helper(TreeNode nodeL, TreeNode nodeR) {
		if (nodeL == null && nodeR == null) {
			return true;
		} else if (nodeL == null || nodeR == null) {
			return false;
		} else if (nodeL.value == nodeR.value) {
			return helper(nodeL.right, nodeR.left) && helper(nodeL.left, nodeR.right);
		}

		return false;
	}
}
