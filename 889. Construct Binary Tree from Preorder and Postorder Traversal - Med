
/**
 * Return any binary tree that matches the given preorder and postorder traversals.
 *
 * Values in the traversals pre and post are distinct positive integers.
 *
 *
 *
 * Example 1:
 *
 * Input: pre = [1,2,4,5,3,6,7], post = [4,5,2,6,7,3,1]
 * Output: [1,2,3,4,5,6,7]
 *
 *
 * Note:
 *
 * 1 <= pre.length == post.length <= 30
 * pre[] and post[] are both permutations of 1, 2, ..., pre.length.
 * It is guaranteed an answer exists. If there exists multiple answers, you can return any of them.
 * Accepted
 */
public class TreePrePost {
	/**
	 * Find roots of subtrees in pre,
	 * search the root in post to find the left subtree and right subtree recursively
	 *
	 * Time: O(n^2)
	 * Space: O(n^2)
	 */
	public TreeNode constructFromPrePost(int[] pre, int[] post) {
		if (pre == null || post == null) {
			return null;
		}
		TreeNode root = new TreeNode(pre[0]);
		if (pre.length == 1) {
			return root;
		}

		int left = 0;
		for (int i = 0; i < post.length; i++){
			if (post[i] == pre[1]) {
				left = i + 1;
			}
		}

		root.left = constructFromPrePost(Arrays.copyOfRange(pre, 1, left + 1),
			Arrays.copyOfRange(post, 0, left));
		root.right = constructFromPrePost(Arrays.copyOfRange(pre, left + 1, pre.length),
			Arrays.copyOfRange(post, left, post.length - 1));
		return root;
	}
}
