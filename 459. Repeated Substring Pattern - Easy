
/*
Given a non-empty string check if it can be constructed by taking a substring of it and appending multiple copies of the substring together. You may assume the given string consists of lowercase English letters only and its length will not exceed 10000.

 

Example 1:

Input: "abab"
Output: True
Explanation: It's the substring "ab" twice.
Example 2:

Input: "aba"
Output: False
Example 3:

Input: "abcabcabcabc"
Output: True
Explanation: It's the substring "abc" four times. (And the substring "abcabc" twice.)

 */

public class RepeatedSubString {
	/**
	 * For every divisible substring segments from the input string
	 * Use a hash set to store one of the the segments, compare if the rest of the segments
	 * is contained in the set
	 *
	 * Time: O(n^2) worst, on average much better
	 * Space: O(n)
	 * 
	 */
	public boolean repeatedSubstringPattern(String s) {
		if (s == null || s.length() <= 0){
			return false;
		}

		int d = 2;
		while (d <= s.length()){
			if (s.length() % d == 0) {
				Set<String> set = new HashSet<>();
				int seg = s.length() / d;
				String sSub = s.substring(0, seg);
				set.add(sSub);

				int i = seg;
				boolean isRepeated = true;
				while (i + seg <= s.length() && isRepeated) {
					sSub = s.substring(i, i + seg);
					isRepeated = set.contains(sSub);
					i += seg;
				}

				if (isRepeated) {
					return true;
				}
			}

			d++;
		}

		return false;
	}
