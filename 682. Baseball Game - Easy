//You're now a baseball game point recorder.
//
//	Given a list of strings, each string can be one of the 4 following types:
//
//	Integer (one round's score): Directly represents the number of points you get in this round.
//	"+" (one round's score): Represents that the points you get in this round are the sum of the last two valid round's points.
//	"D" (one round's score): Represents that the points you get in this round are the doubled data of the last valid round's points.
//	"C" (an operation, which isn't a round's score): Represents the last valid round's points you get were invalid and should be removed.
//	Each round's operation is permanent and could have an impact on the round before and the round after.
//
//	You need to return the sum of the points you could get in all the rounds.

class Solution {
    /**
    * Store all valid scores in a stack
    * Case 1: Integer - push into the stack
    * Case 2: "+" - get the top and 2nd to top scores and add them, then push back the scores and the sum
    * Case 3: "D" - get the top and push the double of the top into the stack
    * Case 4: "C" - pop the top of the stack
    *
    * Time: O(n)
    * Space: O(n)
    *
    */
    
    public int calPoints(String[] ops) {
        Deque<Integer> stack = new ArrayDeque<>();
        
        // Construct score stack
        for (String op : ops) {
            if (op.equals("+")) {
                int top1 = stack.pop();
                int top2 = stack.peek();
                stack.push(top1);
                stack.push(top1 + top2);
            } else if (op.equals("D")) {
                int top1 = stack.peek();
                stack.push(2 * top1);
            } else if (op.equals("C")) {
                stack.pop();
            } else {
                stack.push(Integer.valueOf(op));
            }
        }
        
        // Add scores
        int sum = 0;     
        while (!stack.isEmpty()) {
            sum += stack.pop();
        }
        
        return sum;
    }
}
