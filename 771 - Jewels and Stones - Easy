
/**
* You're given strings J representing the types of stones that are jewels, and S representing the stones you have.  Each character in S is a type of stone you have.  You want to know how many of the stones you have are also jewels.
* The letters in J are guaranteed distinct, and all characters in J and S are letters. Letters are case sensitive, so "a" is considered a different type of stone from "A".
*
**/

// Faster and less space consuming solution than Solution II
class Solution_I {
    /**
    *
    * Iterate through each character in S, check if it exists in J, and add up the corresponding count
    * 
    * Time: O(max(j, s))
    * Space: O(1)
    *
    **/
    
    public int numJewelsInStones(String J, String S) {
        int cnt = 0; 
        // Sanity Check
        if (J == null || S == null || J.length() <= 0 || S.length() <= 0) {
            return cnt;
        }
        
        // Iterate through S to calculate counts
        for (int i = 0; i < S.length(); i++){
            if(J.contains(String.valueOf(S.charAt(i)))) {
                cnt += 1;
            }
        }
                             
        return cnt;
    }
}

// Faster and less space consumption solution than Solution III
// Assuming J has no longer length than S
class Solution_II {
    /**
    * Set a HashMap for set of Jewels, each unique letter corresponding to the 
    * count of the jewels
    * Iterate through each character in S, and add up the corresponding count in J
    * 
    * Time: O(max(j, s))
    * Space: O(j)
    *
    **/
    
    public int numJewelsInStones(String J, String S) {
        int cnt = 0; 
        // Sanity Check
        if (J == null || S == null || J.length() <= 0 || S.length() <= 0) {
            return cnt;
        }
        
        // Set the jewel map
        Map<Character, Integer> jewelMap = new HashMap<>();
        for(int i = 0; i < J.length(); i++){
            jewelMap.put(J.charAt(i), 1);
        }
        
        // Iterate through S to calculate counts
        for (int i = 0; i < S.length(); i++){
            if(jewelMap.containsKey(S.charAt(i))) {
                cnt += 1;
            }
        }
                             
        return cnt;
    }
}


class Solution_III {
    /**
    * Set a HashMap for set of Stones, each unique letter corresponding to the 
    * count of the stone
    * Iterate through each character in J, and add up the corresponding count 
    * of the stones in the stone map.
    * 
    * Time: O(max(s, j))
    * Space: O(s)
    *
    **/
    
    public int numJewelsInStones(String J, String S) {
        int cnt = 0; 
        // Sanity Check
        if (J == null || S == null || J.length() <= 0 || S.length() <= 0) {
            return cnt;
        }
        
        // Set the stone map
        Map<Character, Integer> stoneMap = new HashMap<>();
        for(int i = 0; i < S.length(); i++){
            if (stoneMap.containsKey(S.charAt(i))) {
                stoneMap.put(S.charAt(i), stoneMap.get(S.charAt(i)) + 1); 
            } else {
               stoneMap.put(S.charAt(i), 1);
            }
        }
        
        // Iterate through J to calculate counts
        for (int j = 0; j < J.length(); j++){
            if(stoneMap.containsKey(J.charAt(j))) {
                cnt += stoneMap.get(J.charAt(j));
            }
        }
                             
        return cnt;
    }
}
