
/*
Given a string array words, find the maximum value of length(word[i]) * length(word[j]) where the two words do not share common letters. You may assume that each word will contain only lower case letters. If no such two words exist, return 0.

Example 1:

Input: ["abcw","baz","foo","bar","xtfn","abcdef"]
Output: 16
Explanation: The two words can be "abcw", "xtfn".
Example 2:

Input: ["a","ab","abc","d","cd","bcd","abcd"]
Output: 4
Explanation: The two words can be "ab", "cd".
Example 3:

Input: ["a","aa","aaa","aaaa"]
Output: 0
Explanation: No such pair of words.
 */
public class MaxProdWordLen {

	/*
	 * Use a bit bucket for each word in the words,
	 * Find the two pair that has the largest sum
	 *
	 * Time: O(n^2)
	 * Space: O(n)
	 */
	public int maxProduct(String[] words) {
		if (words == null) {
			return 0;
		}

		// Store all word bits
		int[] wordBits = new int[words.length];
		for (int i = 0; i < words.length; i++) {
			String word = words[i];
			wordBits[i] = 0;
			for (int j = 0; j < word.length(); j++){
				wordBits[i] |= 1 << word.charAt(j) - 'a';
			}
		}

		// Exmaine each word pair
		int maxProd = 0;
		for (int i = 0; i < words.length - 1; i++){
			for (int j = i + 1; j < words.length; j++){
				if ((wordBits[i] & wordBits[j]) == 0) {
					int w1Len = words[i].length();
					int w2Len = words[j].length();
					maxProd = Math.max(maxProd, w1Len * w2Len);
				}
			}
		}

		return maxProd;
	}
}
