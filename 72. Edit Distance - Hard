
/*
Given two words word1 and word2, find the minimum number of operations required to convert word1 to word2.

You have the following 3 operations permitted on a word:

Insert a character
Delete a character
Replace a character
Example 1:

Input: word1 = "horse", word2 = "ros"
Output: 3
Explanation:
horse -> rorse (replace 'h' with 'r')
rorse -> rose (remove 'r')
rose -> ros (remove 'e')
Example 2:

Input: word1 = "intention", word2 = "execution"
Output: 5
Explanation:
intention -> inention (remove 't')
inention -> enention (replace 'i' with 'e')
enention -> exention (replace 'n' with 'x')
exention -> exection (replace 'n' with 'c')
exection -> execution (insert 'u')
 */
public class EditDistance {
	/**
	 * Use an 2d matrix to store the number of steps needed to change word1 to word2
	 *
	 * Time: O(mn)
	 * Space: O(mn)
	 */
	public int minDistance(String word1, String word2) {
		if (word1 == null && word2 == null) {
			return -1;
		} else if ((word1 == null || word1.isEmpty()) && word2 != null) {
			return word2.length();
		} else if (word1 != null && (word2 == null || word2.isEmpty())) {
			return word1.length();
		}

		int m = word1.length();
		int n = word2.length();
		int[][] minStep = new int[m + 1][n + 1];

		for (int i = 0; i <= m; i++){
			minStep[i][0] = i;
		}

		for (int j = 0; j <= n; j++){
			minStep[0][j] = j;
		}

		for (int i = 0; i < m ; i++){
			for (int j = 0; j < n; j++){
				if (word1.charAt(i) == word2.charAt(j)) {
					minStep[i + 1][j + 1] = minStep[i][j];
				} else {
					minStep[i + 1][j + 1] = Math.min(minStep[i + 1][j], Math.min(minStep[i][j + 1], minStep[i][j])) + 1;
				}
			}
		}

		return minStep[m][n];
	}

	public static void main(String[] args){
		String s1 = "horse";
		String s2 = "ros";
		EditDistance ed = new EditDistance();
		System.out.println(ed.minDistance(s1, s2));
	}
}
