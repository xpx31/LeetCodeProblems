
/*
Given a string containing only three types of characters: '(', ')' and '*', write a function to check whether this string is valid. We define the validity of a string by these rules:

Any left parenthesis '(' must have a corresponding right parenthesis ')'.
Any right parenthesis ')' must have a corresponding left parenthesis '('.
Left parenthesis '(' must go before the corresponding right parenthesis ')'.
'*' could be treated as a single right parenthesis ')' or a single left parenthesis '(' or an empty string.
An empty string is also valid.
Example 1:
Input: "()"
Output: True
Example 2:
Input: "(*)"
Output: True
Example 3:
Input: "(*))"
Output: True
Note:
The string size will be in the range [1, 100].
 */
public class ValidParenthesisII {
	/**
	 * Use two variables to count the min and max number of open left brackets
	 * low: count the number of open left brackets
	 * 			when encountering "(", open one left bracket,
	 * 			else ")" or "*", then close one left bracket
	 * high: count the number of open left brackets when encountering non ")",
	 * 			 "(" or "*", then open one left bracket,
	 * 			 else ")", close one left bracket
	 *
	 * Time: O(n)
	 * Space: O(n)
	 */
	public boolean checkValidString(String s) {
		if(s == null || s.equals("")){
			return true;
		}
		int low = 0;
		int high = 0;

		char[] ca = s.toCharArray();
		for (char c : ca){
			low += c == '(' ? 1 : -1;
			high += c != ')' ? 1 : -1;
			if (high < 0) {
				return low == 0;
			}
			low = Math.max(low, 0);
		}
		return low == 0;
	}
}
