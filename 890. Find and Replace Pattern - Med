// You have a list of words and a pattern, and you want to know which words in words matches the pattern.
// 
// A word matches the pattern if there exists a permutation of letters p so that after replacing every letter x in the pattern with p(x), we get the desired word.
//
// (Recall that a permutation of letters is a bijection from letters to letters: every letter maps to another letter, and no two letters map to the same letter.)
//
// Return a list of the words in words that match the given pattern. 
//
// You may return the answer in any order.
//
// Note:
//
// 1 <= words.length <= 50
// 1 <= pattern.length = words[i].length <= 20




class Solution {
    /**
    * Use a hashMap to store the map between the letters in pattern and word for each word
    * and use another hashMap to store the map between the letters in word and pattern for each word
    *       Case1: new pattern letter -> map the letter in pattern with the letter in word
    *       Case2: repeated pattern letter -> check if the mapped letter is showing as the letter in word
    *       Case3 and 4: new word letter and repeated word letter respectively
    * Check if map is voliated, then skip the word, otherwise, add to result list. 
    *
    * Time: O(n^2) average, O(n^3) worst
    * Space: O(n)
    */
    public List<String> findAndReplacePattern(String[] words, String pattern) {
        Map<Character, Character> wordMap = new HashMap<>();
        Map<Character, Character> letterMap = new HashMap<>();
        List<String> res = new ArrayList<>();
        
        // Exmaine the pattern with each word
        for (int i = 0; i < words.length; i++){
            String word = words[i];
            boolean addToRes = true;
            
            // Store pattern to map
            for (int j = 0; j < word.length(); j++){
                char charP = pattern.charAt(j);
                char charW = word.charAt(j);
                
                // New word letter
                if(wordMap.get(charW) == null) {
                    wordMap.put(charW, charP);
                } else { // Repeated pattern letter
                    if (wordMap.get(charW) != charP){
                        addToRes = false;
                        break;
                    }
                }
                
                // New pattern letter
                if(letterMap.get(charP) == null) {
                    letterMap.put(charP, charW);
                } else { // Repeated pattern letter
                    if (letterMap.get(charP) != charW){
                        addToRes = false;
                        break;
                    }
                }
            }
            
            if (addToRes == true){
                res.add(word);
            }
            
            wordMap = new HashMap<>();
            letterMap = new HashMap<>();
        }
        
        return res;
    }
}
