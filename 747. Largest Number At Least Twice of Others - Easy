
/**
 * In a given integer array nums, there is always exactly one largest element.
 *
 * Find whether the largest element in the array is at least twice as much as every other number in the array.
 *
 * If it is, return the index of the largest element, otherwise return -1.
 *
 * Example 1:
 *
 * Input: nums = [3, 6, 1, 0]
 * Output: 1
 * Explanation: 6 is the largest integer, and for every other number in the array x,
 * 6 is more than twice as big as x.  The index of value 6 is 1, so we return 1.
 *
 *
 * Example 2:
 *
 * Input: nums = [1, 2, 3, 4]
 * Output: -1
 * Explanation: 4 isn't at least as big as twice the value of 3, so we return -1.
 *
 *
 * Note:
 *
 * nums will have a length in the range [1, 50].
 * Every nums[i] will be an integer in the range [0, 99].
 */
public class LargestAtLeastTwiceLarge {
	/**
	 * Use two pointers goinig in the same direction pointing to the largest and 2nd largest term respectively
	 * Determine if the largest is at least as twice as the 2nd largest after all elelments are examined
	 *
	 * Time: O(n)
	 * Space: O(1)
	 */
	public int dominantIndex(int[] nums) {
		if (nums == null || nums.length <= 0){
			return -1;
		} else if (nums.length == 1) {
			return 0;
		}

		int j = nums[0] >= nums[1] ? 0 : 1;
		int k = j == 0 ? 1 : 0;
		for (int i = 2; i < nums.length; i++){
			if (nums[i] >= nums[j]) {
				k = j;
				j = i;
			} else if (nums[i] > nums[k]) {
				k = i;
			}
		}

		return nums[j] >= 2 * nums[k] ? j : -1;
	}
}
