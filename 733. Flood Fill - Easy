
/**
 * An image is represented by a 2-D array of integers, each integer representing the pixel value of the image (from 0 to 65535).
 *
 * Given a coordinate (sr, sc) representing the starting pixel (row and column) of the flood fill, and a pixel value newColor, "flood fill" the image.
 *
 * To perform a "flood fill", consider the starting pixel, plus any pixels connected 4-directionally to the starting pixel of the same color as the starting pixel, plus any pixels connected 4-directionally to those pixels (also with the same color as the starting pixel), and so on. Replace the color of all of the aforementioned pixels with the newColor.
 *
 * At the end, return the modified image.
 *
 *
 * Example 1:
 * Input: 
 * image = [[1,1,1],[1,1,0],[1,0,1]]
 * sr = 1, sc = 1, newColor = 2
 * Output: [[2,2,2],[2,2,0],[2,0,1]]
 * Explanation: 
 * From the center of the image (with position (sr, sc) = (1, 1)), all pixels connected 
 * by a path of the same color as the starting pixel are colored with the new color.
 * Note the bottom corner is not colored 2, because it is not 4-directionally connected
 * to the starting pixel.
 * Note:
 *
 * The length of image and image[0] will be in the range [1, 50].
 * The given starting pixel will satisfy 0 <= sr < image.length and 0 <= sc < image[0].length.
 * The value of each color in image[i][j] and newColor will be an integer in [0, 65535].
 *
 *
 *
 */


public class FloodFill {
	/**
	 * Use DFS recursively to find if any of the 4-directionally connected cells having the same color
	 *   Case 0: no cells has the same color - change the color of the starting cell and return
	 *   Case 1: any cells has the same color - go to that direction and search again
	 *   Case 2: at boundary - treat as case 0 for the cell searching for
	 *
	 * Time: O(nm)
	 * Space: O(nm)
	 */
	public int[][] floodFill(int[][] image, int sr, int sc, int newColor) {
		// Given valid image, sr, sc, and newColor
		// Sanity Check
		int oldColor = image[sr][sc];
		if (oldColor == newColor){
			return image;
		} else {
			image[sr][sc] = newColor;
		}

		boolean[][] visited = new boolean[image.length][image[0].length];
		visited[sr][sc] = true;
		floodFillUp(image, visited, sr, sc, oldColor, newColor);
		floodFillRight(image, visited, sr, sc, oldColor, newColor);
		floodFillDown(image, visited, sr, sc, oldColor, newColor);
		floodFillLeft(image, visited, sr, sc, oldColor, newColor);
		return image;
	}

	// Fill Up
	private void floodFillUp(int[][] image, boolean[][] visited, int sr, int sc, int oldColor, int newColor){
		sr--;
		// Case 2
		if (sr < 0 || visited[sr][sc]) {
			return;
		}
		visited[sr][sc] = true;

		// Case 1
		if (image[sr][sc] == oldColor){
			floodFillUp(image, visited, sr, sc, oldColor, newColor);
			floodFillRight(image, visited, sr, sc, oldColor, newColor);
			floodFillLeft(image, visited, sr, sc, oldColor, newColor);
			image[sr][sc] = newColor;
		}
		// Case 0
	}

	// Fill Right
	private void floodFillRight(int[][] image, boolean[][] visited, int sr, int sc, int oldColor, int newColor){
		sc++;
		// Case 2
		if (sc >= image[0].length || visited[sr][sc]) {
			return;
		}
		visited[sr][sc] = true;

		// Case 1
		if (image[sr][sc] == oldColor){
			floodFillUp(image, visited, sr, sc, oldColor, newColor);
			floodFillRight(image, visited, sr, sc, oldColor, newColor);
			floodFillDown(image, visited, sr, sc, oldColor, newColor);
			image[sr][sc] = newColor;
		}
		// Case 0
	}

	// Fill Down
	private void floodFillDown(int[][] image, boolean[][] visited, int sr, int sc, int oldColor, int newColor){
		sr++;
		// Case 2
		if (sr >= image.length || visited[sr][sc]) {
			return;
		}
		visited[sr][sc] = true;

		// Case 1
		if (image[sr][sc] == oldColor){
			floodFillRight(image, visited, sr, sc, oldColor, newColor);
			floodFillLeft(image, visited, sr, sc, oldColor, newColor);
			floodFillDown(image, visited, sr, sc, oldColor, newColor);
			image[sr][sc] = newColor;
		}
		// Case 0
	}

	// Fill Left
	private void floodFillLeft(int[][] image, boolean[][] visited, int sr, int sc, int oldColor, int newColor){
		sc--;
		// Case 2
		if (sc < 0 || visited[sr][sc]) {
			return;
		}
		visited[sr][sc] = true;

		// Case 1
		if (image[sr][sc] == oldColor){
			floodFillUp(image, visited, sr, sc, oldColor, newColor);
			floodFillLeft(image, visited, sr, sc, oldColor, newColor);
			floodFillDown(image, visited, sr, sc, oldColor, newColor);
			image[sr][sc] = newColor;
		}
		// Case 0
	}
}
