
/*
91. Decode Ways
DFS not accepted

A message containing letters from A-Z is being encoded to numbers using the following mapping:

'A' -> 1
'B' -> 2
...
'Z' -> 26
Given a non-empty string containing only digits, determine the total number of ways to decode it.

Example 1:

Input: "12"
Output: 2
Explanation: It could be decoded as "AB" (1 2) or "L" (12).
Example 2:

Input: "226"
Output: 3
Explanation: It could be decoded as "BZ" (2 26), "VF" (22 6), or "BBF" (2 2 6).
 */
public class DecodeWays {
	/**
	 * Use two pointers to scan the string for valid decoding
	 * and dfs to find all combinations of valid decoding
	 *
	 * Case 0: first digit range 1, 2, all others i++, j++
	 * Case 1: second digit range 1-6, all others i = j + 1, j = i
	 *
	 * Time: O(2^n)
	 * Space: O(n)
	 */
	public int numDecodings(String s) {
		if (s == null || s.length() <= 0) {
			return 0;
		}

		Set<List<Integer>> decodes = new HashSet<>();
		List<Integer> solu = new ArrayList<>();
		numDecodingHelper(s, 0, decodes, solu);
		return decodes.size();
	}

	private void numDecodingHelper(String s, int i, Set<List<Integer>> decodes, List<Integer> solu){
		if (i >= s.length()){
			if (!decodes.contains(solu)){
				decodes.add(new ArrayList(solu));
			}
			return;
		}

		int s1 = decoding(s.charAt(i), null);
		if (s1 != 0) {
			solu.add(s1);
			numDecodingHelper(s, i + 1, decodes, solu);
			solu.remove(solu.size() - 1);
		}

		if (i < s.length() - 1) {
			int s2 = decoding(s.charAt(i), s.charAt(i + 1));
			if (s2 != 0) {
				solu.add(s2);
				numDecodingHelper(s, i + 2, decodes, solu);
				solu.remove(solu.size() - 1);
			}
		}
	}

	private int decoding(Character a, Character b){
		int num = 0;
		int aInt = a - '1';
		if (b != null){
			int bInt = b - '1';
			num = b == '0' ? (aInt + 1) * 10 : (aInt + 1) * 10 + bInt + 1;
			num = 10 <= num && num <= 26 ? num : 0;
		} else {
			if (0 <= aInt && aInt <= 8){
				num = aInt + 1;
			}
		}
		return num;
	}
