
/*
In English, we have a concept called root, which can be followed by some other words to form another longer word - let's call this word successor. For example, the root an, followed by other, which can form another word another.

Now, given a dictionary consisting of many roots and a sentence. You need to replace all the successor in the sentence with the root forming it. If a successor has many roots can form it, replace it with the root with the shortest length.

You need to output the sentence after the replacement.

Example 1:

Input: dict = ["cat", "bat", "rat"]
sentence = "the cattle was rattled by the battery"
Output: "the cat was rat by the bat"


Note:

The input will only have lower-case letters.
1 <= dict words number <= 1000
1 <= sentence words number <= 1000
1 <= root length <= 100
1 <= sentence words length <= 1000
 */
public class ReplaceWords {
	/**
	 * Use prefix trie tree to store all dictionary words,
	 * Examine each word in sentence if there is a prefix that exists in the trie,
	 * replace upon discovery.
	 *
	 * Time: O(d + s)
	 * Space: O(max(d, s))
	 *
	 */
	public String replaceWords(List<String> dict, String sentence) {
		// Add dictionary to trie
		TrieNode trie = new TrieNode();
		for (String root : dict){
			TrieNode cur = trie;
			for (char c : root.toCharArray()){
				if (cur.children[c - 'a'] == null) {
					cur.children[c - 'a'] = new TrieNode();
				}
				cur = cur.children[c - 'a'];
			}
			cur.word = root;
		}

		// Exmaine wach word in sentence
		StringBuilder sb = new StringBuilder();
		for (String word : sentence.split("\\s+")){
			TrieNode cur = trie;
			for (char c : word.toCharArray()){
				if (cur.children[c - 'a'] == null || cur.word != null) {
					break;
				} else {
					if (cur.word == null) {
						cur = cur.children[c - 'a'];
					}
				}
			}
			sb.append(cur.word != null ? cur.word : word);

			// Space
			if (word.length() > 0) {
				sb.append(" ");
			}
		}
		sb.deleteCharAt(sb.length() - 1);

		return sb.toString();
	}
}

class TrieNode {
	TrieNode[] children;
	String word;
	TrieNode(){
		children = new TrieNode[26];
	}
}
