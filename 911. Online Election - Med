
/*
In an election, the i-th vote was cast for persons[i] at time times[i].

Now, we would like to implement the following query function: TopVotedCandidate.q(int t) will return the number of the person that was leading the election at time t.  

Votes cast at time t will count towards our query.  In the case of a tie, the most recent vote (among tied candidates) wins.

 

Example 1:

Input: ["TopVotedCandidate","q","q","q","q","q","q"], [[[0,1,1,0,0,1,0],[0,5,10,15,20,25,30]],[3],[12],[25],[15],[24],[8]]
Output: [null,0,1,1,0,0,1]
Explanation: 
At time 3, the votes are [0], and 0 is leading.
At time 12, the votes are [0,1,1], and 1 is leading.
At time 25, the votes are [0,1,1,0,0,1], and 1 is leading (as ties go to the most recent vote.)
This continues for 3 more queries at time 15, 24, and 8.
 

Note:

1 <= persons.length = times.length <= 5000
0 <= persons[i] <= persons.length
times is a strictly increasing array with all elements in [0, 10^9].
TopVotedCandidate.q is called at most 10000 times per test case.
TopVotedCandidate.q(int t) is always called with t >= times[0].

 */

public class TopVotedCandidate {
	int[] timesArr;
	int[] history;

	/**
	 * Use a hash map to store the each candidate votes at each time
	 * Use an array to record the top candidate at each time
	 *
	 * Time: O(n)
	 * Space: O(n)
	 *
	 * @param persons
	 * @param times
	 */
	public TopVotedCandidate(int[] persons, int[] times) {
		Map<Integer, Integer> votes = new HashMap<>();
		timesArr = times;
		history = new int[times.length];
		int maxSoFar = 0;
		int maxCandidate = -1;

		for (int i = 0; i < times.length; i++){
			// Set votes for votes at each time
			int vote = 0;
			if (!votes.containsKey(persons[i])){
				vote = 1;
			} else {
				vote = votes.get(persons[i]) + 1;
			}
			votes.put(persons[i], vote);

			// Determine the max vote and candidate it belonges to
			if (vote >= maxSoFar){
				maxSoFar = vote;
				maxCandidate = persons[i];
			}
			// Record the max vote candidate at each time
			history[i] = maxCandidate;
		}
	}

	/**
	 * Use binary search to find the index of the time query
	 * and return the corresponding history record
	 *
	 * Time: O(log n), n: size of the times array <= 5000 given
	 * Space: O(1)
	 *
	 * @param t
	 * @return
	 */
	public int q(int t) {
		// Time request out of bound
		if (t < 0) {
			return -1;
		} else if (t >= timesArr[timesArr.length - 1]){
			return history[history.length - 1];
		}

		int left = 0;
		int right = timesArr.length - 1;

		// Binary search find the time index
		while (left < right - 1) {
			int mid = left + (right - left) / 2;
			if (timesArr[mid] == t) {
				return history[mid];
			} else if(t < timesArr[mid]) {
				right = mid;
			} else {
				left = mid;
			}
		}

		return history[left];
	}
}
