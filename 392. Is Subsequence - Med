
/*
Given a string s and a string t, check if s is subsequence of t.

You may assume that there is only lower case English letters in both s and t. t is potentially a very long (length ~= 500,000) string, and s is a short string (<=100).

A subsequence of a string is a new string which is formed from the original string by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. (ie, "ace" is a subsequence of "abcde" while "aec" is not).

Example 1:
s = "abc", t = "ahbgdc"

Return true.

Example 2:
s = "axc", t = "ahbgdc"

Return false.

Follow up:
If there are lots of incoming S, say S1, S2, ... , Sk where k >= 1B, and you want to check one by one to see if T has its subsequence. In this scenario, how would you change your code?

Credits:
Special thanks to @pbrother for adding this problem and creating all test cases.
 */
public class IsSubsequence {
	/**
	 * If there are many incoming s
	 * Store all characters of t into a hashmap and the list of indices as the values
	 * and search the relative order of char of s in t
	 *
	 * Time: O(t + s log t)
	 * Space: O(t)
	 */
	public boolean isSubsequence(String s, String t) {
		if (t == null) {
			return false;
		} else if (s == null || s.length() <= 0){
			return true;
		}

		// Store all characters of t with their index order - O(t)
		Map<Character, List<Integer>> map = new HashMap<>();
		for (int i = 0; i < t.length(); i++){
			if (map.get(t.charAt(i)) == null) {
				List<Integer> list = new ArrayList<>();
				list.add(i);
				map.put(t.charAt(i), list);
			} else {
				map.get(t.charAt(i)).add(i);
			}
		}

		// Examine all s character for relative order
		int target = -1;
		for (int i = 0; i < s.length(); i++){
			// Character does not exist
			if (map.get(s.charAt(i)) == null) {
				return false;
			} else {
				List<Integer> list = map.get(s.charAt(i));
				target = binarySearch(list, target);
				if (target == -1) {
					return false;
				}
				target++;
			}
		}
		return true;
	}

	private int binarySearch(List<Integer> list, int target) {
		int left = 0;
		int right = list.size() - 1;
		while (left <= right) {
			int mid = left + (right - left) / 2;
			if (target > list.get(mid)) {
				left = mid + 1;
			} else {
				right = mid - 1;
			}
		}

		return left >= list.size() ? -1 : list.get(left);
	}

	/**
	 * Use a pointer pointing to s
	 * and another to scan t
	 * advance s pointer only upon encounting the same letter in t
	 *
	 * Time: O(t)
	 * Space: O(1)
	 */
	public boolean isSubsequenceII(String s, String t) {
		if (t == null) {
			return false;
		} else if (s == null || s.length() <= 0){
			return true;
		}

		int si = 0;
		for (int ti = 0; ti < t.length(); ti++){
			if (t.charAt(ti) == s.charAt(si)){
				if (++si >= s.length()){
					return true;
				}
			}
		}

		return false;
	}
}
