
// Given an n-ary tree, return the preorder traversal of its nodes' values.

public class NaryPreOrder {
	/*
// Definition for a Node.
class Node {
    public int val;
    public List<Node> children;

    public Node() {}

    public Node(int _val,List<Node> _children) {
        val = _val;
        children = _children;
    }
};
*/
	/**
	 * Recursively add all the root first, and all its children
	 * Time: O(n)
	 * Space: O(n)
	 */
	public List<Integer> preorder(Node root) {
		List<Integer> list = new ArrayList<>();
		return preOrderHelper(root, list);
	}

	private List<Integer> preOrderHelper(Node root, List<Integer> list){
		if (root == null) {
			return list;
		}

		list.add(root.val);
		for (Node c : root.children){
			list = preOrderHelper(c, list);
		}

		return list;
	}
}
