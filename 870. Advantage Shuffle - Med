
/*
Given two arrays A and B of equal size, the advantage of A with respect to B is the number of indices i for which A[i] > B[i].

Return any permutation of A that maximizes its advantage with respect to B.



Example 1:

Input: A = [2,7,11,15], B = [1,10,4,11]
Output: [2,11,7,15]
Example 2:

Input: A = [12,24,8,32], B = [13,25,32,11]
Output: [24,32,8,12]


Note:

1 <= A.length = B.length <= 10000
0 <= A[i] <= 10^9
0 <= B[i] <= 10^9
 */
public class AdvantageShuffle {
	/*
	 * Store all number in A to a treemap
	 * for each number of B
	 * select a number that is the smallest higher than B in A
	 * if the number does not exist
	 * choose the lowest number in A
	 *
	 * Time: O(AlogA + B)
	 * Space: O(A)
	 */
	public int[] advantageCount(int[] A, int[] B) {
		if (A == null || B == null){
			return A;
		}

		TreeMap<Integer, Integer> mapA = new TreeMap<>();
		for (int a : A) {
			// Including duplicated values
			mapA.put(a, mapA.getOrDefault(a, 0) + 1);
		}

		for (int i = 0; i < B.length; i++) {
			Integer keyA = mapA.higherKey(B[i]);
			if (keyA == null) {
				A[i] = mapA.firstKey();
			} else {
				A[i] = keyA;
			}

			if (mapA.get(A[i]) == 1) {
				mapA.remove(A[i]);
			} else {
				mapA.put(A[i], mapA.get(A[i]) - 1);
			}
		}

		return A;
	}
}
