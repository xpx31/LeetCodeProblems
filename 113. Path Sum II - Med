
/*
Given a binary tree and a sum, find all root-to-leaf paths where each path's sum equals the given sum.

Note: A leaf is a node with no children.

Example:

Given the below binary tree and sum = 22,

      5
     / \
    4   8
   /   / \
  11  13  4
 /  \    / \
7    2  5   1
Return:

[
   [5,4,11,2],
   [5,8,4,5]
]
 */
public class PathSum {
	/**
	 * Use dfs to travel the tree and record the path if the sum is wanted at leave node
	 *
	 * Time: O(n)
	 * Space: O(heigh of tree)
	 */
	public List<List<Integer>> pathSum(TreeNode root, int sum) {
		List<List<Integer>> res = new ArrayList<>();
		List<Integer> list = new ArrayList<>();
		dfs(root, 0, sum, list, res);
		return res;
	}

	private void dfs(TreeNode node, int nodeSum, int target, List<Integer> list, List<List<Integer>> res){
		if (node == null) {
			return;
		} else if (node.left == null && node.right == null) {
			if (nodeSum + node.value == target){
				list.add(node.value);
				res.add(new ArrayList<Integer>(list));
				list.remove(list.size() - 1);
			}
			return;
		}

		list.add(node.value);
		nodeSum += node.value;
		dfs(node.left, nodeSum, target, list, res);
		dfs(node.right, nodeSum, target, list, res);
		nodeSum -= node.value;
		list.remove(list.size() - 1);
	}
}
