/*

Write a function that reverses a string. The input string is given as an array of characters char[].

Do not allocate extra space for another array, you must do this by modifying the input array in-place with O(1) extra memory.

You may assume all the characters consist of printable ascii characters.

 

Example 1:

Input: ["h","e","l","l","o"]
Output: ["o","l","l","e","h"]
Example 2:

Input: ["H","a","n","n","a","h"]
Output: ["h","a","n","n","a","H"]

*/

class Solution {
    /**
    * Use two pointers going in the opposite directions from two ends towards the center, 
    * and swap each character until they pass each other.
    *
    * Time: O(n)
    * Space: O(1)
    */
    public void reverseString(char[] s) {
        if (s == null || s.length <= 1){
            return;
        }
        
        int i = 0;
        int j = s.length - 1;
        while (i < j) {
            swap(s, i, j);
            i++;
            j--;
        }
    }
    
    private void swap(char[] s, int i1, int i2){
        char c = s[i1];
        s[i1] = s[i2];
        s[i2] = c;
    }
}
