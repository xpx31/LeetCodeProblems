/**
* Given a singly linked list, determine if it is a palindrome.
*
*/


/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    /**
    *
    * Find the middle of the list use fast and slow pointers,
    * Reverse the second half of the list,
    * and then compare the elements in the two halves
    *
    * Time: O(n)
    * Space: O(1)
    *
    */
    public boolean isPalindrome(ListNode head) {
        // Corner cases
        if (head == null || head.next == null){
            return true;
        }
        
        // Find the middle node
        ListNode fast = head;
        ListNode slow = head;
        while(fast.next != null && fast.next.next != null){
            fast = fast.next.next;
            slow = slow.next;
        }
        
        // Reverse the 2nd half of the list
        ListNode cur = slow.next;
        ListNode prev = null;
        while(cur != null) {
            ListNode next = cur.next;
            cur.next = prev;
            prev = cur;
            cur = next;
        }
        ListNode head2 = prev;
                
        // Compare two lists
        while(head2 != null){
            if(head.val != head2.val){
                return false;
            }
            head2 = head2.next;
            head = head.next;
        }
        
        return true;
    }
}
