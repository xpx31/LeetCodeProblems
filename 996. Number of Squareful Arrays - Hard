
/*
Given an array A of non-negative integers, the array is squareful if for every pair of adjacent elements, their sum is a perfect square.

Return the number of permutations of A that are squareful.  Two permutations A1 and A2 differ if and only if there is some index i such that A1[i] != A2[i].

 

Example 1:

Input: [1,17,8]
Output: 2
Explanation: 
[1,8,17] and [17,8,1] are the valid permutations.
Example 2:

Input: [2,2,2]
Output: 1
 

Note:

1 <= A.length <= 12
0 <= A[i] <= 1e9

 */
public class NumSquareful {
	/**
	 * Use DFS to going through all permutations of the array elements,
	 * at each level, check if the sum of the passed in number and current number is a perfect square
	 *
	 * Level: each position of an element
	 * Branch: possible element
	 *
	 * Time: O(n!)
	 * Space: O(n)
	 *
	 */
	public int numSquarefulPerms(int[] A) {
		if (A == null || A.length <= 0){
			return 0;
		}

		return numSquareful(A, 0);
	}

	private int numSquareful(int[] A, int cur) {
		if (cur == A.length){
			return 1;
		}

		int res = 0;
		for (int i = cur; i < A.length; i++) {
			if ((cur == 0 || isPerfectSquare(A[i] + A[cur - 1])) &&
				  !repeated(A, i, cur)) {
				swap(A, cur, i);
				res += numSquareful(A, cur + 1);
				swap(A, cur, i);
			}
		}

		return res;
	}

	private void swap(int[] A, int i, int j){
		int temp = A[i];
		A[i] = A[j];
		A[j] = temp;
	}

	private boolean isPerfectSquare(int sum){
		double x = Math.sqrt(sum);
		return x == (int)x;
	}

	private boolean repeated(int[] A, int i, int cur){
		while (cur < i){
			if (A[cur++] == A[i]){
				return true;
			}
		}
		return false;
	}
}
