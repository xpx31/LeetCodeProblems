
/*
Given a collection of distinct integers, return all possible permutations.

Example:

Input: [1,2,3]
Output:
[
  [1,2,3],
  [1,3,2],
  [2,1,3],
  [2,3,1],
  [3,1,2],
  [3,2,1]
]
 */
public class Permutations {
	/**
	 * Use DFS to add all permutations
	 *
	 * Time: O(n!)
	 * Space: O(n)
	 */
	public List<List<Integer>> permute(int[] nums) {
		List<List<Integer>> res = new ArrayList<>();
		if (nums == null) {
			return res;
		}

		permutate(nums, 0, res);
		return res;
	}

	private void permutate(int[] nums, int id, List<List<Integer>> res){
		if (id == nums.length){
			List<Integer> list = new ArrayList<>();
			for (int x : nums){
				list.add(x);
			}
			res.add(list);
			return;
		}

		for (int i = id; i < nums.length; i++){
			swap(nums, i, id);
			permutate(nums, id + 1, res);
			swap(nums, i, id);
		}
	}

	private void swap(int[] nums, int i1, int i2){
		int t = nums[i1];
		nums[i1] = nums[i2];
		nums[i2] = t;
	}
}
