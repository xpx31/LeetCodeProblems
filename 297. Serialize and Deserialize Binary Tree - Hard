
/*
Serialization is the process of converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, or transmitted across a network connection link to be reconstructed later in the same or another computer environment.

Design an algorithm to serialize and deserialize a binary tree. There is no restriction on how your serialization/deserialization algorithm should work. You just need to ensure that a binary tree can be serialized to a string and this string can be deserialized to the original tree structure.

Example:

You may serialize the following tree:

    1
   / \
  2   3
     / \
    4   5

as "[1,2,3,null,null,4,5]"
Clarification: The above format is the same as how LeetCode serializes a binary tree. You do not necessarily need to follow this format, so please be creative and come up with different approaches yourself.

Note: Do not use class member/global/static variables to store states. Your serialize and deserialize algorithms should be stateless.
 */
public class Codec {

	// Encodes a tree to a single string.
	/**
	 * Convert the tree to string in preorder
	 * Time: O(n)
	 * Space: O(height of tree)
	 */
	public String serialize(TreeNode root) {
		StringBuilder sb = new StringBuilder();
		buildString(root, sb);
		return sb.toString();
	}

	private void buildString(TreeNode root, StringBuilder sb){
		if (root == null) {
			sb.append("null,");
			return;
		}

		sb.append(root.value + ",");
		buildString(root.left, sb);
		buildString(root.right, sb);
	}

	// Decodes your encoded data to tree.
	/**
	 * Split the string by ","
	 * costruct the tree in preorder
	 * Time: O(n)
	 * Space: O(height of tree)
	 */
	public TreeNode deserialize(String data) {
		Deque<String> nums = new LinkedList();
		nums.addAll(Arrays.asList(data.split(",")));
		return buildTree(nums);
	}

	private TreeNode buildTree(Deque<String> nums){
		String x = nums.poll();
		TreeNode root = null;
		if (!x.equals("null")){
			root = new TreeNode(Integer.parseInt(x));
			root.left = buildTree(nums);
			root.right = buildTree(nums);
		}

		return root;
	}
}
