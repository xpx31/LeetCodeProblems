
/*
You are given a binary tree in which each node contains an integer value.

Find the number of paths that sum to a given value.

The path does not need to start or end at the root or a leaf, but it must go downwards (traveling only from parent nodes to child nodes).

The tree has no more than 1,000 nodes and the values are in the range -1,000,000 to 1,000,000.

Example:

root = [10,5,-3,3,2,null,11,3,-2,null,1], sum = 8

      10
     /  \
    5   -3
   / \    \
  3   2   11
 / \   \
3  -2   1

Return 3. The paths that sum to 8 are:

1.  5 -> 3
2.  5 -> 2 -> 1
3. -3 -> 11
 */
public class PathSumIII {
	/**
	 * Use a hashmap to store the prefix sum
	 * Keep a record of all the current sum up to the current node
	 * Check if the current sum - target exisits in the prefix sum
	 * which means from the node of the prefix sum down the path,
	 * there exists a target sum
	 *
	 * Time: O(n)
	 * Space: O(n)
	 */
	public int pathSum(TreeNode root, int sum) {
		Map<Integer, Integer> preSum = new HashMap<>();
		preSum.put(0, 1);
		return pathSumHelper(root, sum, 0, preSum);
	}

	private int pathSumHelper(TreeNode node, int target, int curSum, Map<Integer, Integer> preSum) {
		if (node == null) {
			return 0;
		}

		curSum += node.value;
		int res = preSum.getOrDefault(curSum - target, 0);
		preSum.put(curSum, preSum.getOrDefault(curSum, 0) + 1);
		res += pathSumHelper(node.left, target, curSum, preSum) + pathSumHelper(node.right, target, curSum, preSum);
		preSum.put(curSum, preSum.get(curSum) - 1);
		return res;
	}
}
