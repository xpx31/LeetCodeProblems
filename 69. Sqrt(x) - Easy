//Implement int sqrt(int x).
//
//	Compute and return the square root of x, where x is guaranteed to be a non-negative integer.
//
//	Since the return type is an integer, the decimal digits are truncated and only the integer part of the result is returned.



/**
*
* Use binary expansion to find the left and right range of the input location.
* Use binary search to find the exact solution of the input. 
*
*
* Time: O(log n)
* Space: O(1)
*/

class Solution {
    public int mySqrt(int x) {
		// Special Case
		if (x == 0) {
			return 0;
		}

		// Binary Expansion
		int num = 1;
		while (((Integer.MAX_VALUE / num) > num) && ((num * num) < x)){
			num *= 2;
		}

		// Binary Search
		int left = num / 2;
		int right = num;
		int mid = 0;
		while(left <= right){
			mid = left + (right - left) / 2;

			if (mid != 0 && (Integer.MAX_VALUE / mid) < mid) {
				right = mid - 1;
			} else {
				if (x == mid * mid) {
					return mid;
				} else if (x < mid * mid) {
					right = mid - 1;
				} else {
					left = mid + 1;
				}
			}
		}
		return right;
	}
}
