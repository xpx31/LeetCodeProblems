
/*
A robot is located at the top-left corner of a m x n grid (marked 'Start' in the diagram below).

The robot can only move either down or right at any point in time. The robot is trying to reach the bottom-right corner of the grid (marked 'Finish' in the diagram below).

How many possible unique paths are there?


Above is a 7 x 3 grid. How many possible unique paths are there?

Note: m and n will be at most 100.

Example 1:

Input: m = 3, n = 2
Output: 3
Explanation:
From the top-left corner, there are a total of 3 ways to reach the bottom-right corner:
1. Right -> Right -> Down
2. Right -> Down -> Right
3. Down -> Right -> Right
Example 2:

Input: m = 7, n = 3
Output: 28
 */
public class UniquePath {
	/**
	 * Use a 2-d matrix to store the number of unique pathes going through each cell
	 * Each cell takes the sum of path from above and from right
	 *
	 * Time: O(mn)
	 * Space: O(mn)
	 */
	public int uniquePaths(int m, int n) {
		if (m <= 0 || n <= 0){
			return 0;
		} else if(m == 1 || n == 1){
			return 1;
		}

		int[][] grid = new int[m][n];
		grid[0][0] = 1;
		for (int i = 0; i < m; i++){
			for (int j = 0; j < n; j++){
				grid[i][j] += i - 1 < 0 ? 0 : grid[i - 1][j];
				grid[i][j] += j - 1 < 0 ? 0 : grid[i][j - 1];
			}
		}

		return grid[m - 1][n - 1];
	}
}
