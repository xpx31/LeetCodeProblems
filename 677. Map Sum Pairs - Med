
/*
Implement a MapSum class with insert, and sum methods.

For the method insert, you'll be given a pair of (string, integer). The string represents the key and the integer represents the value. If the key already existed, then the original key-value pair will be overridden to the new one.

For the method sum, you'll be given a string representing the prefix, and you need to return the sum of all the pairs' value whose key starts with the prefix.

Example 1:
Input: insert("apple", 3), Output: Null
Input: sum("ap"), Output: 3
Input: insert("app", 2), Output: Null
Input: sum("ap"), Output: 5

 */
public class MapSum {
	/** Initialize your data structure here. */
	/*
	 * Use a hash map to store each prefix
	 * and another to store the vistied keys
	 *
	 * Time: O(k^2)
	 * Space: O(length of each inserted letter)
	 */
	Map<String, Integer> list;
	Map<String, Integer> visited;
	public MapSum() {
		list = new HashMap<>();
		visited = new HashMap<>();
	}

	public void insert(String key, int val) {
		int update = val - visited.getOrDefault(key, 0);
		visited.put(key, val);

		StringBuilder sb = new StringBuilder();
		char[] keyChar = key.toCharArray();
		for (char c : keyChar){
			sb.append(c);
			String s = sb.toString();
			list.put(s, list.getOrDefault(s, 0) + update);
		}
	}

	public int sum(String prefix) {
		return list.getOrDefault(prefix, 0);
	}
}
