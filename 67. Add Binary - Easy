/*
Given two binary strings, return their sum (also a binary string).

The input strings are both non-empty and contains only characters 1 or 0.

Example 1:

Input: a = "11", b = "1"
Output: "100"
Example 2:

Input: a = "1010", b = "1011"
Output: "10101"

 */
public class AddBinary {
	/**
	 * Use two pointers going from the end of the each input string to the head,
	 * adding the two numbers and store the sum in to a char array for the result
	 *
	 * Time: O(max(a, b))
	 * Space: O(max(a, b))
	 */
	public String addBinary(String a, String b) {
		char[] res = new char[Math.max(a.length(), b.length()) + 1];

		int ai = a.length() - 1;
		int bi = b.length() - 1;
		int ri = res.length - 1;
		int carry = 0;

		while (ri >= 0) {
			int aInt = 0;
			int bInt = 0;

			if (ai >= 0){
				aInt = a.charAt(ai) - '0';
				ai--;
			}

			if (bi >= 0){
				bInt = b.charAt(bi) - '0';
				bi--;
			}

			int sum = aInt + bInt + carry;
			if (sum == 2){
				res[ri] = '0';
				carry = 1;
			} else if (sum == 3){
				res[ri] = '1';
				carry = 1;
			} else {
				res[ri] = sum == 0 ? '0' : '1';
				carry = 0;
			}

			ri--;
		}

		if (res[0] == '0'){
			return new String(res, 1, res.length - 1);
		} else {
			return new String(res);
		}
	}

	public static void main(String[] args){
		String a = "101";
		String b = "1";

		AddBinary ab = new AddBinary();
		System.out.println(ab.addBinary(a, b));
	}
}
