
/*
Given an array A of integers, a ramp is a tuple (i, j) for which i < j and A[i] <= A[j].  The width of such a ramp is j - i.

Find the maximum width of a ramp in A.  If one doesn't exist, return 0.

 

Example 1:

Input: [6,0,8,2,1,5]
Output: 4
Explanation: 
The maximum width ramp is achieved at (i, j) = (1, 5): A[1] = 0 and A[5] = 5.
Example 2:

Input: [9,8,1,0,1,9,4,0,4,1]
Output: 7
Explanation: 
The maximum width ramp is achieved at (i, j) = (2, 9): A[2] = 1 and A[9] = 1.
 

Note:

2 <= A.length <= 50000
0 <= A[i] <= 50000
 
 */
public class MaxWidthRamp {
	/**
	 * Use a stack to hold the smaller values compare with the current value in forward loop
	 * and determine the ramp width in comparison with the element in the stack in the backward loop
	 *
	 * Time: O(n)
	 * Space: O(n)
	 *
	 * @param A
	 * @return
	 */
	public int maxWidthRamp(int[] A){
		Deque<Integer> stack = new ArrayDeque<>();
		int rw = 0;
		for (int i = 0; i < A.length; i++) {
			if (stack.isEmpty() || A[stack.peek()] > A[i]){
				stack.push(i);
			}
		}

		for (int j = A.length - 1; j > rw; j--){
			while (!stack.isEmpty() && A[stack.peek()] <= A[j]){
				rw = Math.max(rw, j - stack.pop());
			}
		}

		return rw;
	}

	/**
	 * Use two pointers going from two ends to towards the center until larger or eqaul value met
	 * keep a record of the max
	 * Time: O(n^2)
	 * Space: O(1)
	 */
	public int maxWidthRampII(int[] A) {
		int maxW = 0;
		for (int i = 0; i < A.length; i++){
			for (int j = A.length - 1; j >= i; j--){
				if (A[j] >= A[i] || (j - i) <= maxW){
					maxW = Math.max(maxW, j - i);
					break;
				}
			}
		}

		return maxW;
	}
  }
