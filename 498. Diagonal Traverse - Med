
/*
Given a matrix of M x N elements (M rows, N columns), return all elements of the matrix in diagonal order as shown in the below image.



Example:

Input:
[
 [ 1, 2, 3 ],
 [ 4, 5, 6 ],
 [ 7, 8, 9 ]
]

Output:  [1,2,4,7,5,3,6,8,9]

Explanation:



Note:

The total number of elements of the given matrix will not exceed 10,000.
 */
public class DiagonalTraverse {
	/**
	 * Assign diagonal index by adding row and col index together
	 * and change the travelling order based on boundary conditions
	 *
	 * Time: O(mn)
	 * Space: O(1)
	 */
	public int[] findDiagonalOrder(int[][] matrix) {
		if (matrix == null || matrix.length <= 0){
			return new int[0];
		}

		int m = matrix.length;
		int n = matrix[0].length;
		int r = 0;
		int c = 0;
		int[] arr = new int[m * n];

		for (int i = 0; i < arr.length; i++){
			arr[i] = matrix[r][c];
			if ((r + c) % 2 == 0) { // even index diagonal moving NE
				if (c == n - 1) {
					r++;
				} else if (r == 0) {
					c++;
				} else {
					r--;
					c++;
				}
			} else { // odd index diagonal moveing SW
				if (r == m - 1) {
					c++;
				} else if (c == 0){
					r++;
				} else {
					r++;
					c--;
				}
			}
		}

		return arr;
	}
}
