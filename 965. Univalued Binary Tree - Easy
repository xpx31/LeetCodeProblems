
/*
A binary tree is univalued if every node in the tree has the same value.

Return true if and only if the given tree is univalued.

 

Example 1:


Input: [1,1,1,1,1,null,1]
Output: true
Example 2:


Input: [2,2,2,5,2]
Output: false
 

Note:

The number of nodes in the given tree will be in the range [1, 100].
Each node's value will be an integer in the range [0, 99].

 */
public class UnivaluedBinaryTree {
	/**
	 * Traverse through the binary tree with DFS and check if the values are the same
	 *
	 * Time: O(nodes)
	 * Space: O(height of the tree)
	 */
	public boolean isUnivalTree(TreeNode root) {
		if (root == null) {
			return true;
		}

		boolean ansL = true;
		boolean ansR = true;
		if (root.left != null){
			if (root.value == root.left.value) {
				ansL = isUnivalTree(root.left);
			} else {
				return false;
			}
		}
		if (root.right != null){
			if (root.value == root.right.value){
				ansR = isUnivalTree(root.right);
			} else {
				return false;
			}
		}

		return ansL && ansR;
	}
}
