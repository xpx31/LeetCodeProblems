
/*
Given a square array of integers A, we want the minimum sum of a falling path through A.

A falling path starts at any element in the first row, and chooses one element from each row.  The next row's choice must be in a column that is different from the previous row's column by at most one.



Example 1:

Input: [[1,2,3],[4,5,6],[7,8,9]]
Output: 12
Explanation:
The possible falling paths are:
[1,4,7], [1,4,8], [1,5,7], [1,5,8], [1,5,9]
[2,4,7], [2,4,8], [2,5,7], [2,5,8], [2,5,9], [2,6,8], [2,6,9]
[3,5,7], [3,5,8], [3,5,9], [3,6,8], [3,6,9]
The falling path with the smallest sum is [1,4,7], so the answer is 12.



Note:

1 <= A.length == A[0].length <= 100
-100 <= A[i][j] <= 100
 */
public class MinFallingPathSum {
	/**
	 * Build a 2d array has the same size as A
	 * each element is the min sum going through it
	 *
	 * Time: O(n^2)
	 * Space: O(n^2) - O(1) if A can be modified
	 */
	public int minFallingPathSum(int[][] A) {
		if (A == null || A.length <= 0){
			return 0;
		}

		int[][] minSum = new int[A.length][A[0].length];
		for (int i = 0; i < A.length; i++){
			for (int j = 0; j < A[i].length; j++){
				if (i - 1 < 0) {
					minSum[i][j] = A[i][j];
				} else {
					int left = j - 1 < 0 ? j : j - 1;
					int right = j + 1 >= minSum[i].length ? j : j + 1;
					int minElm = Math.min(minSum[i - 1][j], Math.min(minSum[i - 1][left], minSum[i - 1][right]));
					minSum[i][j] = A[i][j] + minElm;
				}
			}
		}

		int min = Integer.MAX_VALUE;
		for (int x : minSum[minSum.length - 1]){
			min = Math.min(min, x);
		}

		return min;
	}
}
