  /*
  Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.

(i.e.,  [0,1,2,4,5,6,7] might become  [4,5,6,7,0,1,2]).

Find the minimum element.

The array may contain duplicates.

Example 1:

Input: [1,3,5]
Output: 1
Example 2:

Input: [2,2,2,0,1]
Output: 0
Note:

This is a follow up problem to Find Minimum in Rotated Sorted Array.
Would allow duplicates affect the run-time complexity? How and why?
*/
  
  /**
  * Loop through the array to find the min.
  *
  * Binary search would not help too much in special cases such that 
  * the min. number is surrounded by identical larger numbers: eg: 1111111011111111
  * the time complexity is O(n) in the worst case. 
  *
  * Time: O(n)
  * Space: O(1)
  */
  public int findMin(int[] nums) {
    if (nums == null || nums.length <= 0) {
      return 0;
    }
    int min = nums[0];
    for (int x : nums) {
      min = Math.min(min, x);
    }
    return min;
  }
