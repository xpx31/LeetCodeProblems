
/*
Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.

Example:

Input: [-2,1,-3,4,-1,2,1,-5,4],
Output: 6
Explanation: [4,-1,2,1] has the largest sum = 6.
Follow up:

If you have figured out the O(n) solution, try coding another solution using the divide and conquer approach, which is more subtle.
 */
public class MaxSubarraySum {
	/**
	 * Linearly scan the array from left to right,
	 * Store the max sum in a variable
	 * reset sum and start adding to sum from the point if the sum <= 0
	 *
	 * Time: O(n)
	 * Space: O(1)
	 */
	public int maxSubArray(int[] nums) {
		if (nums == null || nums.length <= 0){
			return 0;
		}

		int sum = 0;
		int max = nums[0];
		for (int x : nums){
			sum = sum <= 0 ? x : sum + x;
			max = Math.max(sum, max);
		}

		return max;
	}
}
